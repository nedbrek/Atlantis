#ifndef GAMEDATA_H
#define GAMEDATA_H
// START A3HEADER
//
// This source file is part of the Atlantis PBM game program.
// Copyright (C) 1995-1999 Geoff Dunbar
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program, in the file license.txt. If not, write
// to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
//
// See the Atlantis Project web page for details:
// http://www.prankster.com/project
//
// END A3HEADER

/// All the items in the game
enum ItemDef
{
	I_FACTIONLEADER,
	I_LEADERS,
	I_VIKING,
	I_BARBARIAN,
	I_PLAINSMAN,
	I_NORTHLING,
	I_NOMAD,
	I_TRIBESMAN,
	I_DARKLING,
	I_SEAELF,
	I_TRIBALELF,
	I_ICEDWARF,
	I_DESERTDWARF,
	I_SILVER,
	I_GRAIN,
	I_LIVESTOCK,
	I_IRON,
	I_WOOD,
	I_STONE,
	I_FUR,
	I_FISH,
	I_HERBS,
	I_HORSE,
	I_CHAINARMOR,
	I_WAGON,
	I_MITHRIL,
	I_IRONWOOD,
	I_WHORSE,
	I_FLOATER,
	I_ROOTSTONE,
	I_YEW,
	I_MPLATE,
	I_DOUBLEBOW,
	I_IVORY,
	I_PEARL,
	I_JEWELRY,
	I_FIGURINES,
	I_TAROTCARDS,
	I_CAVIAR,
	I_WINE,
	I_SPICES,
	I_CHOCOLATE,
	I_TRUFFLES,
	I_VODKA,
	I_ROSES,
	I_PERFUME,
	I_SILK,
	I_VELVET,
	I_MINK,
	I_CASHMERE,
	I_COTTON,
	I_DYES,
	I_WOOL,
	I_LION,
	I_WOLF,
	I_GBEAR,
	I_CROCODILE,
	I_ANACONDA,
	I_SCORPION,
	I_PBEAR,
	I_RAT,
	I_SPIDER,
	I_LIZARD,
	I_TRENT,
	I_ROC,
	I_BOG_THING,
	I_KONG,
	I_SPHINX,
	I_IWURM,
	I_DRAGON,
	I_CENTAUR,
	I_KOBOLD,
	I_OGRE,
	I_LMEN,
	I_WMEN,
	I_SANDLING,
	I_YETI,
	I_GOBLIN,
	I_TROLL,
	I_ETTIN,
	I_SKELETON,
	I_UNDEAD,
	I_LICH,
	I_IMP,
	I_DEMON,
	I_BALROG,
	I_EAGLE,
	I_AMULETOFI,
	I_RINGOFI,
	I_CLOAKOFI,
	I_STAFFOFF,
	I_STAFFOFL,
	I_AMULETOFTS,
	I_AMULETOFP,
	I_RUNESWORD,
	I_SHIELDSTONE,
	I_MCARPET,
	I_IWOLF,
	I_IEAGLE,
	I_IDRAGON,
	I_ISKELETON,
	I_IUNDEAD,
	I_ILICH,
	I_IIMP,
	I_IDEMON,
	I_IBALROG,
	I_PORTAL,
	I_PEASANT,
	I_MCROSSBOW,
	I_MWAGON,
	I_GLIDER,
	I_NET,
	I_LASSO,
	I_BAG,
	I_SPINNING,
	I_CLOTHARMOR,
	I_BOOTS,
	I_PIRATES,
	I_KRAKEN,
	I_MERFOLK,
	I_ELEMENTAL,
	I_MAN,
	// Additional items for Ceran
	I_FAIRY,
	I_URUK,
	I_DROWMAN,
	I_MERC,
	I_TITAN,
	I_AMAZON,
	I_MOUNTAINMAN,
	I_LANCE,
	I_MUSHROOM,
	I_RRAT,
	I_NOOGLE,
	I_MUTANT,
	// Items from Tzarg
	I_BAXE,
	I_MBAXE,
	I_ADMANTIUM,
	I_ADSWORD,
	I_ADBAXE,
	I_IMARM,
	I_ADRING,
	I_ADPLATE,
	I_SUPERBOW,
	I_CAMEL,
	I_DROW,
	I_HYDRA,
	I_STORMGIANT,
	I_CLOUDGIANT,
	I_ILLYRTHID,
	I_SORCERERS,
	I_MAGICIANS,
	I_DARKMAGE,
	I_WARRIORS,
	I_ICEDRAGON,
	I_HEALPOTION,
	I_ROUGHGEM,
	I_GEMS,
	I_JAVELIN,
	I_PIKE,
	I_MWOLF,
	I_MSPIDER,
	I_MOLE,
	I_BPLATE,
	I_MCHAIN,
	I_FSWORD,
	I_QSTAFF,
	I_SABRE,
	I_MSTAR,
	I_PDAGGER,
	I_BHAMMER,
	I_HARP,
	// Generic processed food
	I_FOOD,
};

/// Different types of men who can be recruited
enum ManDef
{
	MAN_NONE,
	MAN_FLEADER,
	MAN_LEADER,
	MAN_VIKING,
	MAN_BARBARIAN,
	MAN_PLAINSMAN,
	MAN_NORTHLING,
	MAN_NOMAD,
	MAN_TRIBESMAN,
	MAN_DARKLING,
	MAN_SEAELF,
	MAN_TRIBALELF,
	MAN_ICEDWARF,
	MAN_DESERTDWARF,
	MAN_MAN,
	// Additional races for Ceran
	MAN_FAIRY,
	MAN_URUK,
	MAN_DROW,
	MAN_MERC,
	MAN_TITAN,
	MAN_AMAZON,
	MAN_MOUNTAINMAN,
	// Additional Races for Miskatonic
	MAN_HIGHELF,
	MAN_WOODELF,
	MAN_HILLDWARF,
	MAN_HALFLING,
	MAN_CENTAUR,
	MAN_MOUNTAINDWARF,
	MAN_GNOME,
	MAN_GREYELF,
	MAN_HUMAN,
	MAN_LIZARDMAN,
	MAN_HALFORC,
	MAN_MINOTAUR,
	MAN_ORC,
	MAN_HOBGOBLIN,
	MAN_GNOLL,
	MAN_OGRE,
	MAN_GOBLIN,
	MAN_UNDERDWARF,
	MAN_DARKELF,
	MAN_KOBOLD,
	NUMMAN
};

/// All the monsters
enum MonsterDef
{
	MONSTER_NONE,
	MONSTER_LION,
	MONSTER_WOLF,
	MONSTER_GBEAR,
	MONSTER_CROCODILE,
	MONSTER_ANACONDA,
	MONSTER_SCORPION,
	MONSTER_PBEAR,
	MONSTER_GRAT,
	MONSTER_SPIDER,
	MONSTER_LIZARD,
	MONSTER_TRENT,
	MONSTER_ROC,
	MONSTER_BOG_THING,
	MONSTER_KONG,
	MONSTER_SPHINX,
	MONSTER_IWURM,
	MONSTER_DRAGON,
	MONSTER_CENTAUR,
	MONSTER_KOBOLD,
	MONSTER_OGRE,
	MONSTER_LMAN,
	MONSTER_WMAN,
	MONSTER_SANDLING,
	MONSTER_YETI,
	MONSTER_GOBLIN,
	MONSTER_TROLL,
	MONSTER_ETTIN,
	MONSTER_SKELETON,
	MONSTER_UNDEAD,
	MONSTER_LICH,
	MONSTER_IMP,
	MONSTER_DEMON,
	MONSTER_BALROG,
	MONSTER_EAGLE,
	MONSTER_PIRATES,
	MONSTER_KRAKEN,
	MONSTER_MERFOLK,
	MONSTER_ELEMENTAL,
	MONSTER_ILLUSION,
	// Ceran
	MONSTER_RRAT,
	MONSTER_NOOGLE,
	MONSTER_MUTANT,
	// Tzargs
	MONSTER_DROW,
	MONSTER_HYDRA,
	MONSTER_STORMGIANT,
	MONSTER_CLOUDGIANT,
	MONSTER_ILLYRTHID,
	MONSTER_SORCERERS,
	MONSTER_MAGICIANS,
	MONSTER_DARKMAGE,
	MONSTER_WARRIORS,
	MONSTER_ICEDRAGON,
	NUMMONSTERS
};

/// Types of weapons
enum WeaponDef
{
	WEAPON_NONE,
	WEAPON_RUNESWORD,
	WEAPON_SUPERBOW,
	WEAPON_DOUBLEBOW,
	WEAPON_MCROSSBOW,
	WEAPON_JAVELIN,
	WEAPON_LANCE,
	WEAPON_ADBAXE,
	WEAPON_ADSWORD,
	WEAPON_FSWORD,
	WEAPON_MBAXE,
	WEAPON_PIKE,
	WEAPON_BAXE,
	WEAPON_BHAMMER,
	WEAPON_SABRE,
	WEAPON_MSTAR,
	WEAPON_QSTAFF,
	WEAPON_PDAGGER,
	// Miskatonic Weapons
	// Iron
	WEAPON_PICK,
	WEAPON_DAGGER,
	WEAPON_SPEAR,
	WEAPON_AXE,
	WEAPON_HAMMER,
	WEAPON_MACE,
	WEAPON_SWORD,
	WEAPON_2HSWORD,
	WEAPON_HALBERD,
	WEAPON_MAUL,
	// Mithril
	WEAPON_MDAGGER,
	WEAPON_MSPEAR,
	WEAPON_MAXE,
	WEAPON_MHAMMER,
	WEAPON_MMACE,
	WEAPON_MSWORD,
	WEAPON_M2HSWORD,
	WEAPON_MHALBERD,
	WEAPON_MMAUL,
	// Admantium
	WEAPON_ADAGGER,
	WEAPON_ASPEAR,
	WEAPON_AAXE,
	WEAPON_AHAMMER,
	WEAPON_AMACE,
	WEAPON_ASWORD,
	WEAPON_A2HSWORD,
	WEAPON_AHALBERD,
	WEAPON_AMAUL,
	// Ranged
	WEAPON_SHORTBOW,
	WEAPON_BOW,
	WEAPON_LONGBOW,
	WEAPON_CROSSBOW,
	WEAPON_HEAVYCROSSBOW,
	// Enchanted
	WEAPON_EPICK,
	WEAPON_EDAGGER,
	WEAPON_ESPEAR,
	WEAPON_EAXE,
	WEAPON_EHAMMER,
	WEAPON_EMACE,
	WEAPON_ESWORD,
	WEAPON_E2HSWORD,
	WEAPON_EHALBERD,
	WEAPON_EMAUL,
	// Mithril
	WEAPON_EMDAGGER,
	WEAPON_EMSPEAR,
	WEAPON_EMAXE,
	WEAPON_EMHAMMER,
	WEAPON_EMMACE,
	WEAPON_EMSWORD,
	WEAPON_EM2HSWORD,
	WEAPON_EMHALBERD,
	WEAPON_EMMAUL,
	// Admantium
	WEAPON_EADAGGER,
	WEAPON_EASPEAR,
	WEAPON_EAAXE,
	WEAPON_EAHAMMER,
	WEAPON_EAMACE,
	WEAPON_EASWORD,
	WEAPON_EA2HSWORD,
	WEAPON_EAHALBERD,
	WEAPON_EAMAUL,
	// Ranged
	WEAPON_ESHORTBOW,
	WEAPON_EBOW,
	WEAPON_ELONGBOW,
	WEAPON_ECROSSBOW,
	WEAPON_EHEAVYCROSSBOW,
	WEAPON_WIZSTAFF,
	NUMWEAPONS
};

/// Types of armor
enum ArmorDef
{
	ARMOR_NONE,
	ARMOR_CLOAKOFI,
	ARMOR_ADPLATE,
	ARMOR_ADRING,
	ARMOR_IMITHRIL,
	ARMOR_MARMOR,
	ARMOR_MCHAIN,
	ARMOR_PLATEARMOR,
	ARMOR_BPLATE,
	ARMOR_CHAINARMOR,
	ARMOR_LEATHERARMOR,
	ARMOR_CLOTHARMOR,
	// Miskatonic
	ARMOR_PADDED,
	ARMOR_LEATHER,
	// Iron
	ARMOR_SCALE,
	ARMOR_MAIL,
	ARMOR_PLATEMAIL,
	ARMOR_PLATE,
	// Mithril
	ARMOR_MSCALE,
	ARMOR_MMAIL,
	ARMOR_MPLATEMAIL,
	ARMOR_MPLATE,
	// Admantium
	ARMOR_ASCALE,
	ARMOR_AMAIL,
	ARMOR_APLATEMAIL,
	ARMOR_APLATE,
	// Enchanted
	ARMOR_EPADDED,
	ARMOR_ELEATHER,
	ARMOR_ESCALE,
	ARMOR_EMAIL,
	ARMOR_EPLATEMAIL,
	ARMOR_EPLATE,
	ARMOR_EMSCALE,
	ARMOR_EMMAIL,
	ARMOR_EMPLATEMAIL,
	ARMOR_EMPLATE,
	ARMOR_EASCALE,
	ARMOR_EAMAIL,
	ARMOR_EAPLATEMAIL,
	ARMOR_EAPLATE,
	// Special
	ARMOR_WIZROBE,
	NUMARMORS
};

/// Types of mounts
enum MountDef
{
	MOUNT_NONE,
	MOUNT_WHORSE,
	MOUNT_HORSE,
	MOUNT_PONY,
	MOUNT_CAMEL,
	MOUNT_MWOLF,
	MOUNT_BOAR,
	MOUNT_MSPIDER,
	MOUNT_MOLE,
	NUMMOUNTS
};

/// Other battle items
enum BattleItemDef
{
	BATTLE_NONE,
	BATTLE_RUNESWORD,
	BATTLE_STAFFOFL,
	BATTLE_STAFFOFF,
	BATTLE_FSWORD,
	BATTLE_AOFI,
	BATTLE_AMULETOFP,
	BATTLE_SHIELDSTONE,
	NUMBATTLEITEMS
};

/// Types of skills
enum SkillDef
{
	S_MINING,
	S_LUMBERJACK,
	S_QUARRYING,
	S_HUNTING,
	S_FISHING,
	S_HERB_LORE,
	S_HORSE_TRAINING,
	S_WEAPONSMITH,
	S_ARMORER,
	S_CARPENTER,
	S_BUILDING,
	S_SHIPBUILDING,
	S_ENTERTAINMENT,
	S_TACTICS,
	S_COMBAT,
	S_RIDING,
	S_CROSSBOW,
	S_LONGBOW,
	S_STEALTH,
	S_OBSERVATION,
	S_HEALING,
	S_SAILING,
	S_FARMING,
	S_RANCHING,
	S_FORCE,
	S_PATTERN,
	S_SPIRIT,
	S_FIRE,
	S_EARTHQUAKE,
	S_FORCE_SHIELD,
	S_ENERGY_SHIELD,
	S_SPIRIT_SHIELD,
	S_MAGICAL_HEALING,
	S_GATE_LORE,
	S_FARSIGHT,
	S_TELEPORTATION,
	S_PORTAL_LORE,
	S_MIND_READING,
	S_WEATHER_LORE,
	S_SUMMON_WIND,
	S_SUMMON_STORM,
	S_SUMMON_TORNADO,
	S_CALL_LIGHTNING,
	S_CLEAR_SKIES,
	S_EARTH_LORE,
	S_WOLF_LORE,
	S_BIRD_LORE,
	S_DRAGON_LORE,
	S_NECROMANCY,
	S_SUMMON_SKELETONS,
	S_RAISE_UNDEAD,
	S_SUMMON_LICH,
	S_CREATE_AURA_OF_FEAR,
	S_SUMMON_BLACK_WIND,
	S_BANISH_UNDEAD,
	S_DEMON_LORE,
	S_SUMMON_IMPS,
	S_SUMMON_DEMON,
	S_SUMMON_BALROG,
	S_BANISH_DEMONS,
	S_ILLUSION,
	S_PHANTASMAL_ENTERTAINMENT,
	S_CREATE_PHANTASMAL_BEASTS,
	S_CREATE_PHANTASMAL_UNDEAD,
	S_CREATE_PHANTASMAL_DEMONS,
	S_INVISIBILITY,
	S_TRUE_SEEING,
	S_DISPEL_ILLUSIONS,
	S_ARTIFACT_LORE,
	S_CREATE_RING_OF_INVISIBILITY,
	S_CREATE_CLOAK_OF_INVULNERABILITY,
	S_CREATE_STAFF_OF_FIRE,
	S_CREATE_STAFF_OF_LIGHTNING,
	S_CREATE_AMULET_OF_TRUE_SEEING,
	S_CREATE_AMULET_OF_PROTECTION,
	S_CREATE_RUNESWORD,
	S_CREATE_SHIELDSTONE,
	S_CREATE_MAGIC_CARPET,
	S_ENGRAVE_RUNES_OF_WARDING,
	S_CONSTRUCT_GATE,
	S_ENCHANT_SWORDS,
	S_ENCHANT_ARMOR,
	S_CONSTRUCT_PORTAL,
	S_MANIPULATE,
	// Skills for Ceran
	S_WEAPONCRAFT,
	S_ARMORCRAFT,
	S_CAMELTRAINING,
	S_GEMCUTTING,
	S_MONSTERTRAINING,
	S_CREATE_FLAMING_SWORD,
	// Food related skills
	S_COOKING,
	S_CREATE_FOOD,
	NSKILLS,
	S_MAGIC
};

/// Types of special attacks
enum SpecialAttackDef
{
	SPECIAL_NONE_DUMMY,
	SPECIAL_FIREBALL,
	SPECIAL_HELLFIRE,
	SPECIAL_CAUSEFEAR,
	SPECIAL_LSTRIKE,
	SPECIAL_MINDBLAST,
	SPECIAL_EARTHQUAKE,
	SPECIAL_FORCE_SHIELD,
	SPECIAL_ENERGY_SHIELD,
	SPECIAL_SPIRIT_SHIELD,
	SPECIAL_DISPEL_ILLUSIONS,
	SPECIAL_SUMMON_STORM,
	SPECIAL_TORNADO,
	SPECIAL_CLEAR_SKIES,
	SPECIAL_BLACK_WIND,
	SPECIAL_BANISH_UNDEAD,
	SPECIAL_BANISH_DEMONS,
	SPECIAL_FIREBREATH,
	SPECIAL_ICEBREATH,
	SPECIAL_CAMEL_FEAR,
	SPECIAL_INVULNERABILITY,
	NUMSPECIALS
};

/// Types of objects
enum ObjectDef
{
	O_DUMMY,
	O_LONGBOAT,
	O_CLIPPER,
	O_GALLEON,
	O_TOWER,
	O_FORT,
	O_CASTLE,
	O_CITADEL,
	O_SHAFT,
	O_LAIR,
	O_RUIN,
	O_CAVE,
	O_DEMONPIT,
	O_CRYPT,
	O_BALLOON,
	O_AGALLEON,
	O_MFORTRESS,
	O_MINE,
	O_FARM,
	O_RANCH,
	O_TIMBERYARD,
	O_INN,
	O_QUARRY,
	// New ocean lairs
	O_ISLE,
	O_DERELICT,
	O_OCAVE,
	O_WHIRL,
	O_ROADN,
	O_ROADNW,
	O_ROADNE,
	O_ROADSW,
	O_ROADSE,
	O_ROADS,
	O_TEMPLE,
	O_MQUARRY,
	O_AMINE,
	O_PRESERVE,
	O_SACGROVE,
	// Abyss Lair
	O_BKEEP,
	O_PALACE,
	// For Ceran
	O_DCLIFFS,
	O_MTOWER,
	O_WGALLEON,
	O_HUT,
	O_STOCKADE,
	O_CPALACE,
	O_NGUILD,
	O_AGUILD,
	O_ATEMPLE,
	O_HTOWER,
	// Tzargs monster lairs
	O_MAGICIANS_TOWER,
	O_DARKTOWER,
	O_GIANTS_CASTLE,
	O_ILAIR,
	O_ICECAVE,
	O_BOG,
	O_TRAPPINGHUT,
	O_STABLE,
	O_MSTABLE,
	O_TRAPPINGLODGE,
	O_FAERIERING,
	O_ALCHEMISTLAB,
	O_OASIS,
	O_GEMAPPRAISER,
	O_HPTOWER,
	O_MCITADEL,
	O_ARMY,
	NOBJECTS
};

/// Types of terrain (for ARegion)
enum TerrainDef
{
	R_OCEAN,
	R_PLAIN,
	R_FOREST,
	R_MOUNTAIN,
	R_SWAMP,
	R_JUNGLE,
	R_DESERT,
	R_TUNDRA,
	R_CAVERN,
	R_UFOREST,
	R_TUNNELS,
	R_NEXUS,
	R_ISLAND_PLAIN,
	R_ISLAND_SWAMP,
	R_ISLAND_MOUNTAIN,
	R_CERAN_PLAIN1,
	R_CERAN_PLAIN2,
	R_CERAN_PLAIN3,
	R_CERAN_FOREST1,
	R_CERAN_FOREST2,
	R_CERAN_FOREST3,
	R_CERAN_MYSTFOREST,
	R_CERAN_MYSTFOREST1,
	R_CERAN_MYSTFOREST2,
	R_CERAN_MOUNTAIN1,
	R_CERAN_MOUNTAIN2,
	R_CERAN_MOUNTAIN3,
	R_CERAN_HILL,
	R_CERAN_HILL1,
	R_CERAN_HILL2,
	R_CERAN_SWAMP1,
	R_CERAN_SWAMP2,
	R_CERAN_SWAMP3,
	R_CERAN_JUNGLE1,
	R_CERAN_JUNGLE2,
	R_CERAN_JUNGLE3,
	R_CERAN_DESERT1,
	R_CERAN_DESERT2,
	R_CERAN_DESERT3,
	R_CERAN_WASTELAND,
	R_CERAN_WASTELAND1,
	R_CERAN_LAKE,
	R_CERAN_TUNDRA1,
	R_CERAN_TUNDRA2,
	R_CERAN_TUNDRA3,
	R_CERAN_CAVERN1,
	R_CERAN_CAVERN2,
	R_CERAN_CAVERN3,
	R_CERAN_UFOREST1,
	R_CERAN_UFOREST2,
	R_CERAN_UFOREST3,
	R_CERAN_TUNNELS1,
	R_CERAN_TUNNELS2,
	R_GROTTO,
	R_CERAN_GROTTO1,
	R_DFOREST,
	R_CERAN_DFOREST1,
	R_CHASM,
	R_CERAN_CHASM1,
	R_VOLCANO,
	R_LAKE,
	R_NUM
};

/// Types of effects
enum EffectDef
{
	EFFECT_DAZZLE,
	EFFECT_FEAR,
	EFFECT_STORM,
	NUMEFFECTS
};

/// Types of ranges
enum RangeDef
{
	RANGE_TELEPORT,
	RANGE_PORTAL_LORE,
	RANGE_FARSIGHT,
	RANGE_WEATHER_LORE,
	RANGE_CLEAR_SKIES,
	NUMRANGES
};

//----------------------------------------------------------------------------
class DamageType
{
public:
	int type;
	int minnum;
	int value;
	int flags;
	int dclass;
	int effect;
};

//----------------------------------------------------------------------------
class DefenseMod
{
public:
	int type;
	int val;
};

//----------------------------------------------------------------------------
class SpecialType
{
public:
	const char *specialname;

	enum
	{
		HIT_BUILDINGIF     = 0x001, // mutually exclusive (1)
		HIT_BUILDINGEXCEPT = 0x002, // mutually exclusive (1)
		HIT_SOLDIERIF      = 0x004, // mutually exclusive (2)
		HIT_SOLDIEREXCEPT  = 0x008, // mutually exclusive (2)
		HIT_MOUNTIF        = 0x010, // mutually exclusive (2)
		HIT_MOUNTEXCEPT    = 0x020, // mutually exclusive (2)
		HIT_EFFECTIF       = 0x040, // mutually exclusive (3)
		HIT_EFFECTEXCEPT   = 0x080, // mutually exclusive (3)
		HIT_ILLUSION       = 0x100,
		HIT_NOMONSTER      = 0x200
	};
	int targflags;

	int buildings[3];
	int targets[7];
	int effects[3];

	enum
	{
		FX_SHIELD       = 0x01,
		FX_DAMAGE       = 0x02,
		FX_USE_LEV      = 0x04,
		FX_DEFBONUS     = 0x08,
		FX_NOBUILDING   = 0x10,
		FX_DONT_COMBINE = 0x20
	};
	int effectflags; ///< combination of above

	int shield[4];
	DefenseMod defs[4];
	const char *shielddesc;

	DamageType damage[4];
	const char *spelldesc;
	const char *spelldesc2;
	const char *spelltarget;
};
extern SpecialType *SpecialDefs;

//----------------------------------------------------------------------------
class EffectType
{
public:
	const char *name;
	int attackVal;
	DefenseMod defMods[4];
	int cancelEffect;

	enum
	{
		EFF_ONESHOT = 0x1,
		EFF_NOSET   = 0x2
	};
	int flags; ///< combination of above
};
extern EffectType *EffectDefs;

//----------------------------------------------------------------------------
class HealType
{
public:
	int num;
	int rate;
};
extern HealType *HealDefs;

//----------------------------------------------------------------------------
class RangeType
{
public:
	enum
	{
		RNG_NEXUS_TARGET = 0x1, ///< Can cast *to* Nexus
		RNG_NEXUS_SOURCE = 0x2, ///< Can cast *from* Nexus
		RNG_CROSS_LEVELS = 0x4, ///< Spell can cross levels
		RNG_SURFACE_ONLY = 0x8  ///< Target region must be on surface
	};
	int flags; ///< combination of above

	enum
	{
		RNG_ABSOLUTE = 0, ///< Range is not based on skill
		RNG_LEVEL,        ///< Range is based on skill
		RNG_LEVEL2,       ///< Range is based on skill level squared
		RNG_LEVEL3,       ///< Range is based on skill level cubed
		NUMRANGECLASSES
	};
	int rangeClass; ///< combination of above

	int rangeMult;
	int crossLevelPenalty; ///< How much extra distance to cross levels?
};
extern RangeType *RangeDefs;

#endif
